pipeline {
  agent any
  environment {
    DOCKERHUB_CREDENTIALS = credentials('docker')
    DOCKERHUB_IMAGE = 'niiqow/taskprod'
    DOCKERHUB_TAG = "task-${env.BRANCH_NAME}-${env.BUILD_NUMBER}"
    AZURE_MODEL = 'SOCIUSRGLAB-RG-MODELODEVOPS-PROD'
    AZURE_PLAN = 'Plan-SociusRGLABRGModeloDevOpsDockerProd'
    AZURE_NAME = 'sociuswebapptest003p'
    TITLE = ''
  }
  stages {

    stage('Get App Settings') {
      steps {
        withCredentials([azureServicePrincipal('Azure-Service-Principal')]) {
          script {
            def appSettings = sh(script: "az webapp config appsettings list -n ${AZURE_NAME} -g ${AZURE_MODEL} --query \"[*].{name:name,value:value}\" --output json", returnStdout: true).trim()
            def appSettingsList = new groovy.json.JsonSlurper().parseText(appSettings)
            appSettingsList.each { setting ->
              if (setting.name == 'titulo') {
          
               TITLE = setting.value
        
            
              }
            }
          }
            echo "El valor de la variable de entorno TITLE es: ${TITLE}"
        }
      }
    }
    
    stage('Build image') {
      steps {
     
        sh "docker build -t ${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG} --build-arg TITLE='${TITLE}' ."
        sh "docker login -u ${DOCKERHUB_CREDENTIALS_USR} -p ${DOCKERHUB_CREDENTIALS_PSW}"
        sh "docker push ${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG}"
        sh "docker rmi ${DOCKERHUB_IMAGE}:${DOCKERHUB_TAG}"
      }
    }
        stage('Deploy') {
  when {
    branch 'develop'
  }
  steps {
    build job: 'Task-deploy-develop', parameters: [
      string(name: 'DOCKERHUB_TAG', value: env.DOCKERHUB_TAG)
    ]
  }
}
  }
}

